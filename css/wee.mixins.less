/*------------------------------------*\
	# Alignment
\*------------------------------------*/

.wee-container () {
	display: block;
	margin-left: auto;
	margin-right: auto;
	.box-sizing(content-box);
	.max-width();
	.min-width();
	.check () when (@padContainer = true) {
		.padded();
	}
	.check();
}
.float (@value: left; ...) {
	float: @value;
}
.float (@value; @width) {
	.width(@width);
}
.left () {
	float: left;
}
.right () {
	float: right;
}
.clearfix () {
	&:after {
		clear: both;
		content : '';
		display: block;
	}
}
.clear (@value: both) {
	clear: @value;
}
.align (baseline) {
	vertical-align: baseline;
}
.align (bottom) {
	vertical-align: bottom;
}
.align (middle) {
	vertical-align: middle;
}
.align (top) {
	vertical-align: top;
}
.align (@value) when (default()) {
	text-align: @value;
}
.vertical-align (@value) {
	vertical-align: @value;
}
.display (@value) {
	display: @value;
}
.inline () {
	display: inline;
}
.inline-block (...) {
	display: inline-block;
}
.inline-block (@width; ...) {
	.width(@width);
}
.inline-block (@width; @height) {
	.height(@height);
}





/*------------------------------------*\
	# Animation
\*------------------------------------*/

.animation (...) {
	-webkit-animation: @arguments;
	animation: @arguments;
}
.keyframes (@name; @start; @end) {
	@-webkit-keyframes ~'@{name}' {
		0% {
			@start();
		}
		100% {
			@end();
		}
	}
	@keyframes ~'@{name}' {
		0% {
			@start();
		}
		100% {
			@end();
		}
	}
}





/*------------------------------------*\
	# Backgrounds
\*------------------------------------*/

.background (@value) when (@value = 0) {
	background: transparent;
}
.background (@value) when (isstring(@value)), (iskeyword(@value))
 		and not (@value = dark)
		and not (@value = light) {
	background+: ~'@{value}';
}
.background (@color: @bodyBackground) when (iscolor(@color)) {
	background: @color;
}
.background (@color; @filename) when not (iskeyword(@color)) and not (isnumber(@filename)) {
	background: @color url('@{imagePath}@{filename}');
}
.background (@color; @filename; @repeat) when (isstring(@repeat)), (iskeyword(@repeat)) {
	background: @color url('@{imagePath}@{filename}') @repeat;
}
.background (@color; @opacity) when (iscolor(@color)) and (isnumber(@opacity)) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		background-color: rgba(red(@color), green(@color), blue(@color), (@opacity / 100));
	}
	.check () when (@opacity < 1) {
		background-color: rgba(red(@color), green(@color), blue(@color), @opacity);
	}
	.check () when (ispercentage(@opacity)) {
		background-color: rgba(red(@color), green(@color), blue(@color), unit((@opacity / 100)));
	}
	.check();
}
.background (@color; @filename; @x; @y: 0; @repeat: no-repeat) when (isnumber(@x)) {
	background: @color url('@{imagePath}@{filename}') @x @y @repeat;
}
.background (light; @opacity: @defaultOpacity) {
	.background(@white; @opacity);
}
.background (dark; @opacity: @defaultOpacity) {
	.background(@black; @opacity);
}
.background-color (@color: @bodyBackground) {
	background-color: @color;
}
.background-image (@value) when (iskeyword(@value)) {
	background-image+: @value;
}
.background-image (@filename) when not (iskeyword(@filename)) {
	background-image+: url('@{imagePath}@{filename}');
}
.background-image (@filename; @repeat) when not (iskeyword(@filename)) and (iskeyword(@repeat)) {
	background-image+: url('@{imagePath}@{filename}');
	.background-repeat(@repeat);
}
.background-image (retina; @filename; @width: auto; @height: auto) {
	.background-image(@filename);
	@media only screen and (-webkit-min-device-pixel-ratio: 1.3), (min--moz-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
		@retinaFilename: ~`@{filename}.split('.').slice(0, @{filename}.split('.').length - 1).join('.') + @{retinaSuffix} + '.' + @{filename}.split('.')[@{filename}.split('.').length - 1]`;
		.background-image(@retinaFilename);
		.background-size(@width; @height);
	}
}
.background-image (@filename; @x; @y: 0; @repeat: no-repeat) when not (iskeyword(@filename)) and (isnumber(@x)) {
	.background-image(@filename);
	.background-position(@x; @y);
	.background-repeat(@repeat);
}
.background-image (retina; @filename; @width; @height; @x; @y: 0; @repeat: no-repeat) {
	.background-image(@filename; @x; @y; @repeat);
	@media only screen and (-webkit-min-device-pixel-ratio: 1.3), (min--moz-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
		@retinaFilename: ~`@{filename}.split('.').slice(0, @{filename}.split('.').length - 1).join('.') + @{retinaSuffix} + '.' + @{filename}.split('.')[@{filename}.split('.').length - 1]`;
		.background-image(@retinaFilename);
		.background-size(@width; @height);
	}
}
.background-image (@filename; @x; @y; @repeat; @attachment) when not (iskeyword(@filename)) and (isnumber(@x)) {
	.background-attachment(@attachment);
	.background-image(@filename; @x; @y; @repeat);
}
.background-image (retina; @filename; @width; @height; @x; @y; @repeat; @attachment) {
	.background-image(@filename; @x; @y; @repeat; @attachment);
	@media only screen and (-webkit-min-device-pixel-ratio: 1.3), (min--moz-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
		@retinaFilename: ~`@{filename}.split('.').slice(0, @{filename}.split('.').length - 1).join('.') + @{retinaSuffix} + '.' + @{filename}.split('.')[@{filename}.split('.').length - 1]`;
		.background-image(@retinaFilename);
		.background-size(@width; @height);
	}
}
.background-image (@filename; @x; @y; @repeat; @attachment; @size) when not (iskeyword(@filename)) and (isnumber(@x)) {
	.background-image(@filename; @x; @y; @repeat; @attachment);
	.background-size(@size);
}
.background-image (@filename; @x; @y; @repeat; @attachment; @width; @height) when (isnumber(@x)) {
	.background-image(@filename; @x; @y; @repeat; @attachment);
	.background-size(@width; @height);
}
.background-gradient (@color: @gray; @start: rgba(0, 0, 0, .8); @end: rgba(0, 0, 0, .2); @angle: 180) when (iscolor(@color)) and (iscolor(@start)) {
	@deg: unit(@angle, deg);
	@revDeg: unit(mod((450 - @angle), 360), deg);
	background-color: @color;
	background: -webkit-linear-gradient(@revDeg, @start, @end);
	background: linear-gradient(@deg, @start, @end);
}
.background-gradient (@color; @spread; @angle: 180) when (iscolor(@color)) and (ispercentage(@spread)) {
	@lighter: lighten(@color, @spread);
	@darker: darken(@color, @spread);
	@deg: unit(@angle, deg);
	@revDeg: unit(mod((450 - @angle), 360), deg);
	background-color: @color;
	background: -webkit-linear-gradient(@revDeg, @lighter, @darker);
	background: linear-gradient(@deg, @lighter, @darker);
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='@{lighter}', endColorstr='@{darker}', GradientType=0);
}
.background-gradient (dark; @start: 0; @end: 1; @angle: 180) {
	@startAlpha: rgba(0, 0, 0, @start);
	@endAlpha: rgba(0, 0, 0, @end);
	@deg: unit(@angle, deg);
	@revDeg: unit(mod((450 - @angle), 360), deg);
	background: -webkit-linear-gradient(@revDeg, @startAlpha, @endAlpha);
	background: linear-gradient(@deg, @startAlpha, @endAlpha);
}
.background-gradient (light; @start: 0; @end: 1; @angle: 180) {
	@startAlpha: rgba(255, 255, 255, @start);
	@endAlpha: rgba(255, 255, 255, @end);
	@deg: unit(@angle, deg);
	@revDeg: unit(mod((450 - @angle), 360), deg);
	background: -webkit-linear-gradient(@revDeg, @startAlpha, @endAlpha);
	background: linear-gradient(@deg, @startAlpha, @endAlpha);
}
.background-attachment (...) {
	background-attachment: @arguments;
}
.background-position (@x: 0; @y: 0) {
	.checkX () when (isunit(@x, '')) {
		@tempX: unit(@x, @defaultUnit);
	}
	.checkX () when (default()) {
		@tempX: @x;
	}
	.checkY () when (isunit(@y, '')) {
		@tempY: unit(@y, @defaultUnit);
	}
	.checkY () when (default()) {
		@tempY: @y;
	}
	.checkX();
	.checkY();
	background-position: @tempX @tempY;
}
.background-repeat (...) {
	background-repeat: @arguments;
}
.background-size (@size) {
	background-size: @size;
}
.background-size (@width; @height) {
	.checkWidth () when (isunit(@width, '')) {
		@tempWidth: unit(@width, @defaultUnit);
	}
	.checkWidth () when (default()) {
		@tempWidth: @width;
	}
	.checkHeight () when (isunit(@height, '')) {
		@tempHeight: unit(@height, @defaultUnit);
	}
	.checkHeight () when (default()) {
		@tempHeight: @height;
	}
	.checkWidth();
	.checkHeight();
	background-size: @tempWidth @tempHeight;
}
.background-clip (@value: border-box) {
	background-clip: ~'@{value}';
}
.sprite (@color; @x: 0; @y: 0; @repeat: no-repeat; @filename: @spriteFilename) when (iscolor(@color)) {
	.background(@color; @filename; @x; @y; @repeat);
}
.sprite (retina; @color; @width: auto; @height: auto; @x: 0; @y: 0; @repeat: no-repeat; @filename: @spriteFilename) when (iscolor(@color)) {
	.background(@color; @filename; @x; @y; @repeat);
	@media only screen and (-webkit-min-device-pixel-ratio: 1.3), (min--moz-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
		@retinaFilename: ~`@{filename}.split('.').slice(0, @{filename}.split('.').length - 1).join('.') + @{retinaSuffix} + '.' + @{filename}.split('.')[@{filename}.split('.').length - 1]`;
		.background-image(@retinaFilename);
		.background-size(@width; @height);
	}
}
.sprite (@x: 0; @y: 0; @repeat: no-repeat; @filename: @spriteFilename) when (isnumber(@x)) {
	.background-image(@filename);
	.background-position(@x; @y);
	.background-repeat(@repeat);
}
.sprite (retina; @x: 0; @y: 0; @width: @retinaSpriteWidth; @height: @retinaSpriteHeight; @repeat: no-repeat; @filename: @spriteFilename) when (isnumber(@x)) {
	.background-image(@filename);
	.background-position(@x; @y);
	.background-repeat(@repeat);
	@media only screen and (-webkit-min-device-pixel-ratio: 1.3), (min--moz-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
		@retinaFilename: ~`@{filename}.split('.').slice(0, @{filename}.split('.').length - 1).join('.') + @{retinaSuffix} + '.' + @{filename}.split('.')[@{filename}.split('.').length - 1]`;
		.background-image(@retinaFilename);
		.background-size(@width; @height);
	}
}





/*------------------------------------*\
	# Blocks
\*------------------------------------*/

.centered-block (...) {
	display: block;
	margin-left: auto;
	margin-right: auto;
}
.centered-block (@maxWidth; ...) {
	.max-width(@maxWidth);
}
.centered-block (@maxWidth; @margin) {
	.spaced(@margin);
}





/*------------------------------------*\
	# Borders
\*------------------------------------*/

.border (@value) when (@value = 0), (@value = none) {
	border: none;
}
.border (@value) when not (@value = false)
		and not (@value = top)
		and not (@value = right)
		and not (@value = bottom)
		and not (@value = left)
		and not (@value = vertical)
		and not (@value = horizontal)
		and not (iscolor(@value))
		and not (@value = light)
		and not (@value = dark) {
	border: ~'@{value}';
}
.border (@color: @lighterGray; @value: 1px; @style: solid) when (iscolor(@color)) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	border: @temp @style @color;
}
.border (dark; @opacity: @defaultOpacity; @value: 1px; @style: solid) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		.border(rgba(0, 0, 0, (@opacity / 100)); @value; @style);
	}
	.check () when (@opacity < 1) {
		.border(rgba(0, 0, 0, @opacity); @value; @style);
	}
	.check () when (ispercentage(@opacity)) {
		.border(rgba(0, 0, 0, unit((@opacity / 100))); @value; @style);
	}
	.check();
}
.border (light; @opacity: @defaultOpacity; @value: 1px; @style: solid) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		.border(rgba(255, 255, 255, @opacity); @value; @style);
	}
	.check () when (@opacity < 1) {
		.border(rgba(255, 255, 255, @opacity); @value; @style);
	}
	.check () when (ispercentage(@opacity)) {
		.border(rgba(255, 255, 255, @opacity); @value; @style);
	}
	.check();
}
.border (top; @color: @lighterGray; @value: 1px; @style: solid) {
	.check () when (@color = 0), (iskeyword(@color)) {
		border-top: 0;
	}
	.check () when not (isnumber(@value))
			and not (@color = 0)
			and not (iskeyword(@color)) {
		border-top: @value @style @color;
	}
	.check () when (isnumber(@value))
			and not (@color = 0)
			and not (iskeyword(@color)) {
		.check () when (isunit(@value, '')) {
			@temp: unit(@value, @defaultUnit);
		}
		.check () when (default()) {
			@temp: @value;
		}
		.check();
		border-top: @temp @style @color;
	}
	.check();
}
.border (top; dark; @opacity: @defaultOpacity; @value: 1px; @style: solid) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		.border(top; rgba(0, 0, 0, (@opacity / 100)); @value; @style);
	}
	.check () when (@opacity < 1) {
		.border(top; rgba(0, 0, 0, @opacity); @value; @style);
	}
	.check () when (ispercentage(@opacity)) {
		.border(top; rgba(0, 0, 0, unit((@opacity / 100))); @value; @style);
	}
	.check();
}
.border (top; light; @opacity: @defaultOpacity; @value: 1px; @style: solid) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		.border(top; rgba(255, 255, 255, (@opacity / 100)); @value; @style);
	}
	.check () when (@opacity < 1) {
		.border(top; rgba(255, 255, 255, @opacity); @value; @style);
	}
	.check () when (ispercentage(@opacity)) {
		.border(top; rgba(255, 255, 255, unit((@opacity / 100))); @value; @style);
	}
	.check();
}
.border (right; @color: @lighterGray; @value: 1px; @style: solid) {
	.check () when (@color = 0), (iskeyword(@color)) {
		border-right: 0;
	}
	.check () when not (isnumber(@value))
			and not (@color = 0)
			and not (iskeyword(@color)) {
		border-right: @value @style @color;
	}
	.check () when (isnumber(@value))
			and not (@color = 0)
			and not (iskeyword(@color)) {
		.check () when (isunit(@value, '')) {
			@temp: unit(@value, @defaultUnit);
		}
		.check () when (default()) {
			@temp: @value;
		}
		.check();
		border-right: @temp @style @color;
	}
	.check();
}
.border (right; dark; @opacity: @defaultOpacity; @value: 1px; @style: solid) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		.border(right; rgba(0, 0, 0, (@opacity / 100)); @value; @style);
	}
	.check () when (@opacity < 1) {
		.border(right; rgba(0, 0, 0, @opacity); @value; @style);
	}
	.check () when (ispercentage(@opacity)) {
		.border(right; rgba(0, 0, 0, unit((@opacity / 100))); @value; @style);
	}
	.check();
}
.border (right; light; @opacity: @defaultOpacity; @value: 1px; @style: solid) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		.border(right; rgba(255, 255, 255, (@opacity / 100)); @value; @style);
	}
	.check () when (@opacity < 1) {
		.border(right; rgba(255, 255, 255, @opacity); @value; @style);
	}
	.check () when (ispercentage(@opacity)) {
		.border(right; rgba(255, 255, 255, unit((@opacity / 100))); @value; @style);
	}
	.check();
}
.border (bottom; @color: @lighterGray; @value: 1px; @style: solid) {
	.check () when (@color = 0), (iskeyword(@color)) {
		border-bottom: 0;
	}
	.check () when not (isnumber(@value))
			and not (@color = 0)
			and not (iskeyword(@color)) {
		border-bottom: @value @style @color;
	}
	.check () when (isnumber(@value))
			and not (@color = 0)
			and not (iskeyword(@color)) {
		.check () when (isunit(@value, '')) {
			@temp: unit(@value, @defaultUnit);
		}
		.check () when (default()) {
			@temp: @value;
		}
		.check();
		border-bottom: @temp @style @color;
	}
	.check();
}
.border (bottom; dark; @opacity: @defaultOpacity; @value: 1px; @style: solid) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		.border(bottom; rgba(0, 0, 0, (@opacity / 100)); @value; @style);
	}
	.check () when (@opacity < 1) {
		.border(bottom; rgba(0, 0, 0, @opacity); @value; @style);
	}
	.check () when (ispercentage(@opacity)) {
		.border(bottom; rgba(0, 0, 0, unit((@opacity / 100))); @value; @style);
	}
	.check();
}
.border (bottom; light; @opacity: @defaultOpacity; @value: 1px; @style: solid) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		.border(bottom; rgba(255, 255, 255, (@opacity / 100)); @value; @style);
	}
	.check () when (@opacity < 1) {
		.border(bottom; rgba(255, 255, 255, @opacity); @value; @style);
	}
	.check () when (ispercentage(@opacity)) {
		.border(bottom; rgba(255, 255, 255, unit((@opacity / 100))); @value; @style);
	}
	.check();
}
.border (left; @color: @lighterGray; @value: 1px; @style: solid) {
	.check () when (@color = 0), (iskeyword(@color)) {
		border-left: 0;
	}
	.check () when not (isnumber(@value))
			and not (@color = 0)
			and not (iskeyword(@color)) {
		border-left: @value @style @color;
	}
	.check () when (isnumber(@value))
			and not (@color = 0)
			and not (iskeyword(@color)) {
		.check () when (isunit(@value, '')) {
			@temp: unit(@value, @defaultUnit);
		}
		.check () when (default()) {
			@temp: @value;
		}
		.check();
		border-left: @temp @style @color;
	}
	.check();
}
.border (left; dark; @opacity: @defaultOpacity; @value: 1px; @style: solid) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		.border(left; rgba(0, 0, 0, (@opacity / 100)); @value; @style);
	}
	.check () when (@opacity < 1) {
		.border(left; rgba(0, 0, 0, @opacity); @value; @style);
	}
	.check () when (ispercentage(@opacity)) {
		.border(left; rgba(0, 0, 0, unit((@opacity / 100))); @value; @style);
	}
	.check();
}
.border (left; light; @opacity: @defaultOpacity; @value: 1px; @style: solid) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		.border(left; rgba(255, 255, 255, (@opacity / 100)); @value; @style);
	}
	.check () when (@opacity < 1) {
		.border(left; rgba(255, 255, 255, @opacity); @value; @style);
	}
	.check () when (ispercentage(@opacity)) {
		.border(left; rgba(255, 255, 255, unit((@opacity / 100))); @value; @style);
	}
	.check();
}
.border (horizontal; @value) when (@value = 0), (iskeyword(@value)) {
	.border(left; @value);
	.border(right; @value);
}
.border (horizontal; @color: @lighterGray; @value: 1px; @style: solid) when (iscolor(@color)) {
	.border(left; @color; @value; @style);
	.border(right; @color; @value; @style);
}
.border (horizontal; dark; @opacity: @defaultOpacity; @value: 1px; @style: solid) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		.border(left; rgba(0, 0, 0, (@opacity / 100)); @value; @style);
		.border(right; rgba(0, 0, 0, (@opacity / 100)); @value; @style);
	}
	.check () when (@opacity < 1) {
		.border(left; rgba(0, 0, 0, @opacity); @value; @style);
		.border(right; rgba(0, 0, 0, @opacity); @value; @style);
	}
	.check () when (ispercentage(@opacity)) {
		.border(left; rgba(0, 0, 0, unit((@opacity / 100))); @value; @style);
		.border(right; rgba(0, 0, 0, unit((@opacity / 100))); @value; @style);
	}
	.check();
}
.border (horizontal; light; @opacity: @defaultOpacity; @value: 1px; @style: solid) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		.border(left; rgba(255, 255, 255, (@opacity / 100)); @value; @style);
		.border(right; rgba(255, 255, 255, (@opacity / 100)); @value; @style);
	}
	.check () when (@opacity < 1) {
		.border(left; rgba(255, 255, 255, @opacity); @value; @style);
		.border(right; rgba(255, 255, 255, @opacity); @value; @style);
	}
	.check () when (ispercentage(@opacity)) {
		.border(left; rgba(255, 255, 255, unit((@opacity / 100))); @value; @style);
		.border(right; rgba(255, 255, 255, unit((@opacity / 100))); @value; @style);
	}
	.check();
}
.border (vertical; @value) when (@value = 0), (iskeyword(@value)) {
	.border(top; @value);
	.border(bottom; @value);
}
.border (vertical; dark; @opacity: @defaultOpacity; @value: 1px; @style: solid) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		.border(top; rgba(0, 0, 0, (@opacity / 100)); @value; @style);
		.border(bottom; rgba(0, 0, 0, (@opacity / 100)); @value; @style);
	}
	.check () when (@opacity < 1) {
		.border(top; rgba(0, 0, 0, @opacity); @value; @style);
		.border(bottom; rgba(0, 0, 0, @opacity); @value; @style);
	}
	.check () when (ispercentage(@opacity)) {
		.border(top; rgba(0, 0, 0, unit((@opacity / 100))); @value; @style);
		.border(bottom; rgba(0, 0, 0, unit((@opacity / 100))); @value; @style);
	}
	.check();
}
.border (vertical; light; @opacity: @defaultOpacity; @value: 1px; @style: solid) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		.border(top; rgba(255, 255, 255, (@opacity / 100)); @value; @style);
		.border(bottom; rgba(255, 255, 255, (@opacity / 100)); @value; @style);
	}
	.check () when (@opacity < 1) {
		.border(top; rgba(255, 255, 255, @opacity); @value; @style);
		.border(bottom; rgba(255, 255, 255, @opacity); @value; @style);
	}
	.check () when (ispercentage(@opacity)) {
		.border(top; rgba(255, 255, 255, unit((@opacity / 100))); @value; @style);
		.border(bottom; rgba(255, 255, 255, unit((@opacity / 100))); @value; @style);
	}
	.check();
}
.border (vertical; @color: @lighterGray; @value: 1px; @style: solid) when (iscolor(@color)) {
	.border(top; @color; @value; @style);
	.border(bottom; @color; @value; @style);
}
.border (@top; @right; @bottom; @left; @color: @lighterGray; @style: solid) when not (iskeyword(@top))
		and (isnumber(@bottom)) {
	.border(top; @color; @top; @style);
	.border(right; @color; @right; @style);
	.border(bottom; @color; @bottom; @style);
	.border(left; @color; @left; @style);
}
.border-image (@filename; @slice: 100%; @width: 1; @outset: 0; @repeat: stretch) {
	-webkit-border-image: url('@{imagePath}@{filename}') @slice @width @outset @repeat;
	border-image: url('@{imagePath}@{filename}') @slice @width @outset @repeat;
}
.border-color (@color) when (iscolor(@color)) {
	border-color: @color;
}
.border-color (light; @opacity: @defaultOpacity) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		border-color: rgba(255, 255, 255, (@opacity / 100));
	}
	.check () when (@opacity < 1) {
		border-color: rgba(255, 255, 255, @opacity);
	}
	.check () when (ispercentage(@opacity)) {
		border-color: rgba(255, 255, 255, unit((@opacity / 100)));
	}
	.check();
}
.border-color (dark; @opacity: @defaultOpacity) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		border-color: rgba(0, 0, 0, (@opacity / 100));
	}
	.check () when (@opacity < 1) {
		border-color: rgba(0, 0, 0, @opacity);
	}
	.check () when (ispercentage(@opacity)) {
		border-color: rgba(0, 0, 0, unit((@opacity / 100)));
	}
	.check();
}
.border-color (top; @color) {
	border-top-color: @color;
}
.border-color (right; @color) {
	border-right-color: @color;
}
.border-color (bottom; @color) {
	border-bottom-color: @color;
}
.border-color (left; @color) {
	border-left-color: @color;
}
.border-style (@style) {
	border-style: @style;
}
.border-style (top; @style) {
	border-top-style: @style;
}
.border-style (right; @style) {
	border-right-style: @style;
}
.border-style (bottom; @style) {
	border-bottom-style: @style;
}
.border-style (left; @style) {
	border-left-style: @style;
}
.border-width (@value) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	border-width: @temp;
}
.border-width (top; @value) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	border-top-width: @temp;
}
.border-width (right; @value) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	border-right-width: @temp;
}
.border-width (bottom; @value) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	border-bottom-width: @temp;
}
.border-width (left; @value) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	border-left-width: @temp;
}





/*------------------------------------*\
	# Box Shadows
\*------------------------------------*/

.shadow (@value: '1px 1px 0 0 rgba(0, 0, 0, @{defaultOpacity})') when (isstring(@value)), (iskeyword(@value))
		and not (@value = dark)
		and not (@value = light)
		and not (@value = inner) {
	box-shadow: ~'@{value}';
}
.shadow (@color; @x: 1px; @y: 1px; @blur: 0; @spread: 0) when (iscolor(@color)) {
	.wee-shadow(@color; @x; @y; @blur; @spread);
}
.shadow (inner; @color; @x: 1px; @y: 1px; @blur: 0; @spread: 0) when (iscolor(@color)) {
	.wee-shadow(@color; @x; @y; @blur; @spread; 'inset ');
}
.shadow (light; @value: @defaultOpacity; @x: 1px; @y: 1px; @blur: 0; @spread: 0; @prefix: '') {
	.check () when not (isnumber(@value)) {
		.shadow(@value);
	}
	.check () when (isnumber(@value))
			and (@value =< 0) {
		box-shadow: 0;
	}
	.check () when not (ispercentage(@value))
			and (@value < 1)
			and (@value > 0) {
		.wee-shadow('rgba(255, 255, 255, @{value})'; @x; @y; @blur; @spread; @prefix);
	}
	.check () when not (ispercentage(@value))
			and (@value >= 1), (@value >= 100) {
		.wee-shadow(@white; @x; @y; @blur; @spread; @prefix);
	}
	.check () when (ispercentage(@value))
			and (@value > 0)
			and (@value < 100) {
		@temp: unit((@value / 100));
		.wee-shadow('rgba(255, 255, 255, @{temp})'; @x; @y; @blur; @spread; @prefix);
	}
	.check();
}
.shadow (inner; light; @opacity: @defaultOpacity; @x: 1px; @y: 1px; @blur: 0; @spread: 0) {
	.shadow(light; @opacity; @x; @y; @blur; @spread; 'inset ');
}
.shadow (dark; @value: @defaultOpacity; @x: 1px; @y: 1px; @blur: 0; @spread: 0; @prefix: '') {
	.check () when not (isnumber(@value)) {
		.shadow(@value);
	}
	.check () when (isnumber(@value))
			and (@value =< 0) {
		box-shadow: 0;
	}
	.check () when not (ispercentage(@value))
			and (@value < 1)
			and (@value > 0) {
		.wee-shadow('rgba(0, 0, 0, @{value})'; @x; @y; @blur; @spread; @prefix);
	}
	.check () when not (ispercentage(@value))
			and (@value >= 1), (@value >= 100) {
		.wee-shadow(@black; @x; @y; @blur; @spread; @prefix);
	}
	.check () when (ispercentage(@value))
			and (@value > 0)
			and (@value < 100) {
		@temp: unit((@value / 100));
		.wee-shadow('rgba(0, 0, 0, @{temp})'; @x; @y; @blur; @spread; @prefix);
	}
	.check();
}
.shadow (inner; @opacity: @defaultOpacity; @x: 1px; @y: 1px; @blur: 0; @spread: 0) {
	.shadow(dark; @opacity; @x; @y; @blur; @spread; 'inset ');
}
.shadow (inner; dark; @opacity: @defaultOpacity; @x: 1px; @y: 1px; @blur: 0; @spread: 0) {
	.shadow(dark; @opacity; @x; @y; @blur; @spread; 'inset ');
}
.wee-shadow (@color; @x; @y; @blur; @spread; @prefix: '') {
	.check () when (isunit(@x, '')) {
		@tempX: unit(@x, rem);
	}
	.check () when not (isunit(@x, '')) {
		@tempX: @x;
	}
	.check () when (isunit(@y, '')) {
		@tempY: unit(@y, rem);
	}
	.check () when not (isunit(@y, '')) {
		@tempY: @y;
	}
	.check () when (isunit(@blur, '')) {
		@tempBlur: unit(@blur, rem);
	}
	.check () when not (isunit(@blur, '')) {
		@tempBlur: @blur;
	}
	.check () when (isunit(@spread, '')) {
		@tempSpread: unit(@spread, rem);
	}
	.check () when not (isunit(@spread, '')) {
		@tempSpread: @spread;
	}
	.check();
	box-shadow: ~'@{prefix}@{tempX} @{tempY} @{tempBlur} @{tempSpread} @{color}';
}





/*------------------------------------*\
	# Colors
\*------------------------------------*/

.color (@color: @baseColor) {
	color: @color;
}
.primary () {
	color: @primary;
}
.secondary () {
	color: @secondary;
}
.tertiary () {
	color: @tertiary;
}
.white () {
	color: @white;
}
.lightestGray () {
	color: @lightestGray;
}
.lighterGray () {
	color: @lighterGray;
}
.lightGray () {
	color: @lightGray;
}
.gray () {
	color: @gray;
}
.darkGray () {
	color: @darkGray;
}
.darkerGray () {
	color: @darkerGray;
}
.darkestGray () {
	color: @darkestGray;
}
.black () {
	color: @black;
}





/*------------------------------------*\
	# Content
\*------------------------------------*/

.content (@value: ''; ...) {
	.check () when (@value = none) {
		content: none;
	}
	.check () when not (@value = false) and not (@value = none) {
		content: ~"'@{value}'";
	}
	.check();
}
.content (@value; @font; ...) {
	font-family: @font;
}
.content (@value; @font; @size; ...) {
	.font-size(@size);
}
.content (@value; @font; @size; @lineHeight) {
	.line-height(@lineHeight);
}
.prefix (@value: '-'; @margin: .5em; @font: false; @color: false) {
	&:before {
		.content(@value; @font);
		.margin(right; @margin);
		.check () when not (@font = false) {
			font-family: @font;
		}
		.check () when not (@color = false) {
			color: @color;
		}
		.check();
	}
}
.suffix (@value: '-'; @margin: .5em; @font: false; @color: false) {
	&:after {
		.content(@value; @font);
		.margin(left; @margin);
		.check () when not (@font = false) {
			font-family: @font;
		}
		.check () when not (@color = false) {
			color: @color;
		}
		.check();
	}
}
.bookends (@value: '-'; @margin: .5em; @font: false; @color: false) {
	.prefix(@value; @margin; @font; @color);
	.suffix(@value; @margin; @font; @color);
}





/*------------------------------------*\
	# Multiple Columns
\*------------------------------------*/

.columns (@count: 2; ...) {
	.columns-count(@count);
}
.columns (@count; @gap; ...) {
	.columns-gap(@gap);
}
.columns (@count; @gap; @style; @width: 1px) {
	.columns-style(@style);
	.columns-width(@width);
}
.columns-count (@value) {
	-moz-column-count: @value;
	-webkit-column-count: @value;
	column-count: @value;
}
.columns-gap (@value) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	-moz-column-gap: @temp;
	-webkit-column-gap: @temp;
	column-gap: @temp;
}
.columns-style (@value) when not (@value = false) {
	-moz-column-rule-style: @value;
	-webkit-column-rule-style: @value;
	column-rule-style: @value;
}
.columns-width (@value) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	-moz-column-rule-width: @temp;
	-webkit-column-rule-width: @temp;
	column-rule-width: @temp;
}





/*------------------------------------*\
	# Display
\*------------------------------------*/

.hide () {
	display: none;
}
.show () {
	display: inherit;
}
.hidden () {
	visibility: hidden;
}
.visible () {
	visibility: visible;
}
.block (...) {
	display: block;
}
.block (@width; ...) {
	.width(@width);
}
.block (@width; @height) {
	.height(@height);
}
.spaced (@margin: @blockMarginBottom) when not (@margin = false) {
	.margin(bottom; @margin);
}
.spaced-block (@margin: @blockMarginBottom; ...) {
	display: block;
	.spaced(@margin);
}
.spaced-block (@margin; @width; ...) {
	.width(@width);
}
.spaced-block (@margin; @width; @height) {
	.height(@height);
}
.box-sizing (@val: border-box) {
	box-sizing: @val;
}
.border-box () {
	.box-sizing(border-box);
}
.content-box () {
	.box-sizing(content-box);
}





/*------------------------------------*\
	# Filters
\*------------------------------------*/

.filter (@value) when (isstring(@value)), (iskeyword(@value)) {
	-webkit-filter: ~'@{value}';
	filter: ~'@{value}';
}
.blur (@value: 2px) {
	.filter('blur(@{value})');
}
.brightness (@value: .5) {
	.filter('brightness(@{value})');
}
.contrast (@value: 1.5) {
	.filter('contrast(@{value})');
}
.grayscale (@value: 1) {
	.filter('grayscale(@{value})');
}
.hue-rotate (@value: 180deg) {
	.filter('hue-rotate(@{value})');
}
.invert (@value: 1) {
	.filter('invert(@{value})');
}
.saturate (@value: .5) {
	.filter('saturate(@{value})');
}
.sepia (@value: .5) {
	.filter('sepia(@{value})');
}
.drop-shadow (@value: '1px 1px 0 rgba(0, 0, 0, @{defaultOpacity})') when (isstring(@value)), (iskeyword(@value)) {
	.filter('drop-shadow(@{value})');
}
.drop-shadow (@color; @x: 1px; @y: 1px; @blur: 0) when (iscolor(@color)) {
	.filter('drop-shadow(@{x} @{y} @{blur} @{color})');
}
.drop-shadow (light; @opacity: @defaultOpacity; @x: 1px; @y: 1px; @blur: 0) {
	.filter('drop-shadow(@{x} @{y} @{blur} rgba(255, 255, 255, @{opacity}))');
}
.drop-shadow (dark; @opacity: @defaultOpacity; @x: 1px; @y: 1px; @blur: 0) {
	.filter('drop-shadow(@{x} @{y} @{blur} rgba(0, 0, 0, @{opacity}))');
}





/*------------------------------------*\
	# Flexbox
\*------------------------------------*/

.flex (@grow: 0; @shrink: 0; @basis: auto) {
	.flex-grow(@grow);
	.flex-shrink(@shrink);
	.flex-basis(@basis);
}
.flex-container (@direction: row; @wrap: nowrap; @justify: flex-start; @align: stretch; @align-content: stretch) {
	.flexbox();
	.flex-direction(@direction);
	.flex-wrap(@wrap);
	.justify-content(@justify);
	.flex-align-items(@align);
	.flex-align-content(@align-content)
}

// Flexbox container
.flexbox (@value: flex) {
	.check () when (@value = flex) {
		display: -ms-flexbox;
		display: -webkit-flex;
	}

	.check () when (@value = inline-flex) {
		display: -ms-inline-flexbox;
		display: -webkit-inline-flex;
	}

	.check();
	display: @value;
}
.flex-direction (@direction: row) {
	.check () when (@direction = row-reverse) {
		-webkit-box-orient: horizontal;
		-webkit-box-direction: reverse;
	}

	.check () when (@direction = column) {
		-webkit-box-orient: vertical;
		-webkit-box-direction: normal;
	}

	.check () when (@direction = column-reverse) {
		-webkit-box-orient: vertical;
		-webkit-box-direction: reverse;
	}

	.check () when (@direction = row) {
		-webkit-box-orient: horizontal;
		-webkit-box-direction: normal;
	}

	.check();
	-webkit-flex-direction: @direction;
	-ms-flex-direction: @direction;
	flex-direction: @direction;
}
.flex-wrap (@wrap: nowrap) {
	.check () when (@wrap = nowrap) {
		-ms-flex-wrap: none;
	}

	.check () when (@wrap = wrap), (@wrap = wrap-reverse) {
		-ms-flex-wrap: @wrap;
	}

	.check();
	-webkit-flex-wrap: @wrap;
	flex-wrap: @wrap;
}
.justify-content (@justify: flex-start) {
	.check () when (@justify = space-between) {
		-ms-flex-pack: justify;
	}

	.check () when (@justify = space-around) {
		-ms-flex-pack: distribute;
	}

	.check () when (@justify = flex-start) {
		-ms-flex-pack: start;
	}

	.check () when (@justify = flex-end) {
		-ms-flex-pack: end;
	}

	.check () when (@justify = center) {
		-ms-flex-pack: center;
	}

	.check();
	-webkit-justify-content: @justify;
	-ms-justify-content: @justify;
	justify-content: @justify;
}
.flex-align-items (@align: stretch) {
	.check () when (@align = flex-start) {
		-ms-flex-align: start;
	}

	.check () when (@align = flex-end) {
		-ms-flex-align: end;
	}

	.check () when (@align = center), (@align = baseline), (@align = stretch) {
		-ms-flex-align: @align;
	}

	.check();
	-webkit-align-items: @align;
	-moz-align-items: @align;
	-ms-align-items: @align;
	align-items: @align;
}
.flex-align-content(@align: stretch) {
	.check () when (@align = space-between) {
		-ms-flex-line-pack: justify;
	}

	.check () when (@align = space-around) {
		-ms-flex-line-pack: distribute;
	}

	.check () when (@align = flex-start) {
		-ms-flex-line-pack: start;
	}

	.check () when (@align = flex-end) {
		-ms-flex-line-pack: end;
	}

	.check () when (@align = center), (@align = stretch) {
		-ms-flex-line-pack: @align;
	}

	-webkit-align-content: @align;
	-ms-align-content: @align;
	align-content: @align;
}

// Flexbox items
.flex-grow (@proportion: 1) {
	-webkit-box-flex: @proportion;
	-webkit-flex-grow: @proportion;
	-ms-flex-positive: @proportion;
	flex-grow: @proportion;
}
.flex-shrink (@proportion: 1) {
	-webkit-flex-shrink: @proportion;
	-ms-flex-negative: @proportion;
	flex-shrink: @proportion;
}
.flex-basis (@proportion: auto) {
	-webkit-flex-basis: @proportion;
	-ms-flex-preferred-size: @proportion;
	flex-basis: @proportion;
}
.flex-align-self (@align: auto) {
	.check () when (@align = flex-start) {
		-ms-flex-item-align: start;
	}

	.check () when (@align = flex-end) {
		-ms-flex-item-align: end;
	}

	.check () when (@align = auto), (@align = center), (@align = baseline), (@align = stretch) {
		-ms-flex-item-align: @align;
	}

	.check();
	-webkit-align-self: @align;
	-ms-align-self: @align;
	align-self: @align;
}





/*------------------------------------*\
	# Font Family
\*------------------------------------*/

.font-family (@value: @baseFont) when not (@value = false) {
	font-family: ~'@{value}';
}





/*------------------------------------*\
	# Font Loading
\*------------------------------------*/

.load-font (@name; @file: @name; @weight: normal; @style: normal) {
	@font-face {
		font-family: ~'@{name}';
		font-style: @style;
		font-weight: @weight;
		.check () when (@woff2Enabled = true) {
			src: url('@{fontPath}@{file}.woff2') format('woff2'),
				 url('@{fontPath}@{file}.woff') format('woff'),
				 url('@{fontPath}@{file}.ttf') format('truetype');
		}
		.check () when (default()) {
			src: url('@{fontPath}@{file}.woff') format('woff'),
				 url('@{fontPath}@{file}.ttf') format('truetype');
		}
		.check();
	}
}





/*------------------------------------*\
	# Font Selection
\*------------------------------------*/

.font (@family: @baseFont; ...) {
	.font-family(@family);
}
.font (@family; @size; ...) {
	.font-size(@size);
}
.font (@family; @size; @weight; ...) {
	.font-weight(@weight);
}
.font (@family; @size; @weight; @lineHeight; ...) {
	.line-height(@lineHeight);
}
.font (@family; @size; @weight; @lineHeight; @style) {
	.font-style(@style);
}





/*------------------------------------*\
	# Font Size
\*------------------------------------*/

.font-size (@value: @baseFontSize; ...) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultFontSizeUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	font-size: @temp;
}
.font-size (@value; @lineHeight) {
	.line-height(@lineHeight);
}





/*------------------------------------*\
	# Font Style
\*------------------------------------*/

.font-style (@value: normal) when not (@value = false) {
	font-style: @value;
}





/*------------------------------------*\
	# Font Weight
\*------------------------------------*/

.font-weight (@value: @baseFontWeight) when not (@value = false) {
	font-weight: @value;
}





/*------------------------------------*\
	# Forms
\*------------------------------------*/

.input-placeholder (@color: @inputPlaceholderColor) {
	&::-webkit-input-placeholder {
		color: @color;
	}
	&::-moz-placeholder {
		color: @color;
	}
	&:-ms-input-placeholder {
		color: @color;
	}
	&::-ms-input-placeholder {
		color: @color;
	}
}






/*------------------------------------*\
	# Grid
\*------------------------------------*/

.row (@margin: @gridMargin) when (ispercentage(@margin)) {
	margin-left: (@margin * -1);
	max-width: (100% + @margin);
	.clearfix();
}
.row-modify (@margin: @gridMargin) {
	margin-left: (@margin * -1);
	max-width: (100% + @margin);
}
.row-reset () {
	margin-left: 0;
	max-width: none;
}
.column (...) {
	float: left;
}
.column (@width: 100%) when not (isunit(@width, '')) {
	width: @width;
}
.column (@share; @columns: @gridColumns) when (isunit(@share, '')) {
	width: ((100% / @columns) * @share);
}
.column (spaced; @share; @columns: @gridColumns; @margin: @gridMargin) {
	margin-left: @margin;
	width: (((100% / @columns) * @share) - (@margin));
}
.column-modify (@share; @columns: @gridColumns) {
	width: ((100% / @columns) * @share);
}
.column-modify (spaced; @share; @columns: @gridColumns; @margin: @gridMargin) {
	margin-left: @margin;
	width: (((100% / @columns) * @share) - (@margin));
}
.column-modify (@width) when not (isunit(@width, '')) {
	width: @width;
}
.column-reset (@resetMargin: false) {
	float: none;
	width: auto;
	.check () when (@resetMargin = true) {
		margin-left: 0;
	}
	.check();
}
.column-pull (@share; @columns: @gridColumns) {
	position: relative;
	right: ((100% / @columns) * @share);
}
.column-push (@share; @columns: @gridColumns) {
	left: ((100% / @columns) * @share);
	position: relative;
}
.column-offset (@share; @columns: @gridColumns) {
	margin-left: ((100% / @columns) * @share);
}
.column-offset (spaced; @share; @columns: @gridColumns; @margin: (@gridMargin / 2)) {
	margin-left: (((100% / @columns) * @share) + (@margin * 2));
}






/*------------------------------------*\
	# Inline Grid
\*------------------------------------*/

.inline-row (@margin: @gridMargin; ...) when (ispercentage(@margin)) {
	margin-left: (@margin * -1);
	max-width: (100% + @margin);
}
.inline-row (@margin: @gridMargin; @spaceless: @gridSpaceless) when not (@spaceless = true) {
	letter-spacing: -.32em;
}
.wee-grid (@marginLeft: @gridMargin) when not (@marginLeft = 0) {
	margin-left: @marginLeft;
}
.wee-grid (@marginLeft: @gridMargin; ...) {
	display: inline-block;
	vertical-align: top;
}
.wee-grid (@marginLeft; @spaceless: @gridSpaceless) when not (@spaceless = true) {
	letter-spacing: normal;
}
.inline-column (@share; @columns: @gridColumns; ...) when (isunit(@share, '')) {
	width: ((100% / @columns) * @share);
	.wee-grid(0);
}
.inline-column (@share; @columns; @spaceless: @gridSpaceless) when (isunit(@share, ''))
		and not (@spaceless = true) {
	margin-right: -.32em;
}
.inline-column (spaced; @share; @columns: @gridColumns; @margin: @gridMargin; @spaceless: false) {
	margin-left: @margin;
	width: (((100% / @columns) * @share) - (@margin));
	.wee-grid(@margin; @spaceless);
}





/*------------------------------------*\
	# Line Height
\*------------------------------------*/

.line-height (@value: @baseLineHeight) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultLineHeightUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	line-height: @temp;
}





/*------------------------------------*\
	# Lists
\*------------------------------------*/

.inline-list () {
	> li {
		display: inline;
	}
}
.inline-list (@spacing) when (isnumber(@spacing)) {
	> li {
		display: inline;
		.margin(left; @spacing);
		&:first-child {
			margin-left: 0;
		}
	}
}
.inline-list (@content; @margin: 0) when (isstring(@content)) {
	> li {
		display: inline;
		.margin(right; @margin);
		.prefix(@content; @margin);
		&:first-child {
			&:before {
				display: none;
			}
		}
	}
}
.list-style (@value) {
	list-style: @value;
}
.list-position (@value: outside) {
	list-style-position: @value;
}
.unstyled () {
	list-style: none;
}





/*------------------------------------*\
	# Margin
\*------------------------------------*/

.margin (@value) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	margin: @temp;
}
.margin (top; @value) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	margin-top: @temp;
}
.margin (right; @value) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	margin-right: @temp;
}
.margin (bottom; @value) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	margin-bottom: @temp;
}
.margin (left; @value) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	margin-left: @temp;
}
.margin (horizontal; @value) {
	.margin(left; @value);
	.margin(right; @value);
}
.margin (horizontal; @left; @right) {
	.margin(left; @left);
	.margin(right; @right);
}
.margin (vertical; @value) {
	.margin(top; @value);
	.margin(bottom; @value);
}
.margin (vertical; @top; @bottom) {
	.margin(top; @top);
	.margin(bottom; @bottom);
}
.margin (@y; @x) when not (iskeyword(@y)) {
	.margin(@y; @x; @y; @x);
}
.margin (@top; @right; @bottom; @left) {
	.margin(top; @top);
	.margin(right; @right);
	.margin(bottom; @bottom);
	.margin(left; @left);
}





/*------------------------------------*\
	# Opacity
\*------------------------------------*/

.opacity (@value) {
	.check () when (ispercentage(@value)) {
		@temp: unit((@value / 100));
	}
	.check () when (@value > 1)
			and not (ispercentage(@value)) {
		@temp: (@value / 100);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	opacity: @temp;
}
.transparent () {
	opacity: 0;
}
.opaque () {
	opacity: 1;
}





/*------------------------------------*\
	# Padding
\*------------------------------------*/

.padding (@value) when not (@value = false)
		and not (@value = horizontal)
		and not (@value = vertical) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	padding: @temp;
}
.padding (top; @value) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	padding-top: @temp;
}
.padding (right; @value) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	padding-right: @temp;
}
.padding (bottom; @value) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	padding-bottom: @temp;
}
.padding (left; @value) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	padding-left: @temp;
}
.padding (horizontal) {
	.padding(left; @bumperPadding);
	.padding(right; @bumperPadding);
}
.padding (horizontal; @value) {
	.padding(left; @value);
	.padding(right; @value);
}
.padding (horizontal; @left; @right) {
	.padding(left; @left);
	.padding(right; @right);
}
.padding (vertical; @value) {
	.padding(top; @value);
	.padding(bottom; @value);
}
.padding (vertical; @top; @bottom) {
	.padding(top; @top);
	.padding(bottom; @bottom);
}
.padding (@vertical; @horizontal) when not (iskeyword(@vertical)) {
	.padding(@vertical; @horizontal; @vertical; @horizontal);
}
.padding (@top; @right; @bottom; @left) {
	.padding(top; @top);
	.padding(right; @right);
	.padding(bottom; @bottom);
	.padding(left; @left);
}
.padded (@padding: @bumperPadding) {
	.padding(left; @padding);
	.padding(right; @padding);
}





/*------------------------------------*\
	# Position
\*------------------------------------*/

.top (@value: 0) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	top: @temp;
}
.right (@value) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	right: @temp;
}
.bottom (@value: 0) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	bottom: @temp;
}
.left (@value) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	left: @temp;
}
.position (@value; ...) when not (@value = false) {
	position: @value;
}
.position (@value; @top; ...) when not (@top = false) {
	.top(@top);
}
.position (@value; @top; @right; ...) when not (@right = false) {
	.right(@right);
}
.position (@value; @top; @right; @bottom; ...) when not (@bottom = false) {
	.bottom(@bottom);
}
.position (@value; @top; @right; @bottom; @left) when not (@left = false) {
	.left(@left);
}
.absolute (...) {
	position: absolute;
}
.absolute (@top; ...) when not (@top = false) {
	.top(@top);
}
.absolute (@top; @right; ...) when not (@right = false) {
	.right(@right);
}
.absolute (@top; @right; @bottom; ...) when not (@bottom = false) {
	.bottom(@bottom);
}
.absolute (@top; @right; @bottom; @left) when not (@left = false) {
	.left(@left);
}
.fixed (...) {
	position: fixed;
}
.fixed (@top; ...) when not (@top = false) {
	.top(@top);
}
.fixed (@top; @right; ...) when not (@right = false) {
	.right(@right);
}
.fixed (@top; @right; @bottom; ...) when not (@bottom = false) {
	.bottom(@bottom);
}
.fixed (@top; @right; @bottom; @left) when not (@left = false) {
	.left(@left);
}
.relative () {
	position: relative;
}
.static () {
	position: static;
}
.z-index (@index: 1) {
	z-index: @index;
}





/*------------------------------------*\
	# Responsive
\*------------------------------------*/

.media-query (@minWidth; @rules) {
	@media (min-width: @minWidth) {
		@rules();
	}
}





/*------------------------------------*\
	# Rounded Corners
\*------------------------------------*/

.rounded (@value; ...) when not (@value = false) {
	background-clip: border-box;
}
.rounded (@value: @defaultRadius) when not (@value = false)
		and not (@value = top)
		and not (@value = right)
		and not (@value = bottom)
		and not (@value = left) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	border-radius: @temp;
}
.rounded (top; @value: @defaultRadius) when not (@value = false)
 		and not (@value = right)
		and not (@value = left) {
	.check () when not (isnumber(@value)), (@value = 0) {
		border-top-left-radius: @value;
		border-top-right-radius: @value;
	}
	.check () when (isnumber(@value))
			and not (@value = 0) {
		@temp: (@value * unit(1, @defaultUnit));
		.check () when (isunit(@temp, rem)), (isunit(@value, rem)) {
			border-top-left-radius: unit(@temp, rem);
			border-top-right-radius: unit(@temp, rem);
		}
		.check () when not (isunit(@temp, rem))
				and not (isunit(@value, rem)) {
			border-top-left-radius: @temp;
			border-top-right-radius: @temp;
		}
		.check();
	}
	.check();
}
.rounded (top; right; @value: @defaultRadius) when not (@value = false) {
	.check () when not (isnumber(@value)), (@value = 0) {
		border-top-right-radius: @value;
	}
	.check () when (isnumber(@value))
			and not (@value = 0) {
		@temp: (@value * unit(1, @defaultUnit));
		.check () when (isunit(@temp, rem)), (isunit(@value, rem)) {
			border-top-right-radius: unit(@temp, rem);
		}
		.check () when not (isunit(@temp, rem))
				and not (isunit(@value, rem)) {
			border-top-right-radius: @temp;
		}
		.check();
	}
	.check();
}
.rounded (top; left; @value: @defaultRadius) when not (@value = false) {
	.check () when not (isnumber(@value)), (@value = 0) {
		border-top-left-radius: @value;
	}
	.check () when (isnumber(@value))
			and not (@value = 0) {
		@temp: (@value * unit(1, @defaultUnit));
		.check () when (isunit(@temp, rem)), (isunit(@value, rem)) {
			border-top-left-radius: unit(@temp, rem);
		}
		.check () when not (isunit(@temp, rem))
				and not (isunit(@value, rem)) {
			border-top-left-radius: @temp;
		}
		.check();
	}
	.check();
}
.rounded (right; @value: @defaultRadius) when not (@value = false) {
	.check () when not (isnumber(@value)), (@value = 0) {
		border-top-right-radius: @value;
		border-bottom-right-radius: @value;
	}
	.check () when (isnumber(@value))
			and not (@value = 0) {
		@temp: (@value * unit(1, @defaultUnit));
		.check () when (isunit(@temp, rem)), (isunit(@value, rem)) {
			border-top-right-radius: unit(@temp, rem);
			border-bottom-right-radius: unit(@temp, rem);
		}
		.check () when not (isunit(@temp, rem))
				and not (isunit(@value, rem)) {
			border-top-right-radius: @temp;
			border-bottom-right-radius: @temp;
		}
		.check();
	}
	.check();
}
.rounded (bottom; @value: @defaultRadius) when not (@value = false)
		and not (@value = right)
		and not (@value = left) {
	.check () when not (isnumber(@value)), (@value = 0) {
		border-bottom-right-radius: @value;
		border-bottom-left-radius: @value;
	}
	.check () when (isnumber(@value))
			and not (@value = 0) {
		@temp: (@value * unit(1, @defaultUnit));
		.check () when (isunit(@temp, rem)), (isunit(@value, rem)) {
			border-bottom-right-radius: unit(@temp, rem);
			border-bottom-left-radius: unit(@temp, rem);
		}
		.check () when not (isunit(@temp, rem))
				and not (isunit(@value, rem)) {
			border-bottom-right-radius: @temp;
			border-bottom-left-radius: @temp;
		}
		.check();
	}
	.check();
}
.rounded (bottom; right; @value: @defaultRadius) when not (@value = false) {
	.check () when not (isnumber(@value)), (@value = 0) {
		border-bottom-right-radius: @value;
	}
	.check () when (isnumber(@value))
			and not (@value = 0) {
		@temp: (@value * unit(1, @defaultUnit));
		.check () when (isunit(@temp, rem)), (isunit(@value, rem)) {
			border-bottom-right-radius: unit(@temp, rem);
		}
		.check () when not (isunit(@temp, rem))
				and not (isunit(@value, rem)) {
			border-bottom-right-radius: @temp;
		}
		.check();
	}
	.check();
}
.rounded (bottom; left; @value: @defaultRadius) when not (@value = false) {
	.check () when not (isnumber(@value)), (@value = 0) {
		border-bottom-left-radius: @value;
	}
	.check () when (isnumber(@value))
			and not (@value = 0) {
		@temp: (@value * unit(1, @defaultUnit));
		.check () when (isunit(@temp, rem)), (isunit(@value, rem)) {
			border-bottom-left-radius: unit(@temp, rem);
		}
		.check () when not (isunit(@temp, rem))
				and not (isunit(@value, rem)) {
			border-bottom-left-radius: @temp;
		}
		.check();
	}
	.check();
}
.rounded (left; @value: @defaultRadius) when not (@value = false) {
	.check () when not (isnumber(@value)), (@value = 0) {
		border-top-left-radius: @value;
		border-bottom-left-radius: @value;
	}
	.check () when (isnumber(@value))
			and not (@value = 0) {
		@temp: (@value * unit(1, @defaultUnit));
		.check () when (isunit(@temp, rem)), (isunit(@value, rem)) {
			border-top-left-radius: unit(@temp, rem);
			border-bottom-left-radius: unit(@temp, rem);
		}
		.check () when not (isunit(@temp, rem))
				and not (isunit(@value, rem)) {
			border-top-left-radius: @temp;
			border-bottom-left-radius: @temp;
		}
		.check();
	}
	.check();
}
.rounded (@top; @right; @bottom; @left) {
	.rounded(top; left; @top);
	.rounded(top; right; @right);
	.rounded(bottom; right; @bottom);
	.rounded(bottom; left; @left);
}





/*------------------------------------*\
	# Shapes
\*------------------------------------*/

.caret (...) {
	content: ' ';
	height: 0;
	width: 0;
}
.caret (up; @color: @darkGray; @size: 5px; @horizontalSize: @size) {
	.border(horizontal; transparent; @horizontalSize);
	.border(bottom; @color; @size);
}
.caret (down; @color: @darkGray; @size: 5px; @horizontalSize: @size) {
	.border(horizontal; transparent; @horizontalSize);
	.border(top; @color; @size);
}
.caret (right; @color: @darkGray; @size: 5px; @verticalSize: @size) {
	.border(vertical; transparent; @verticalSize);
	.border(left; @color; @size);
}
.caret (left; @color: @darkGray; @size: 5px; @verticalSize: @size) {
	.border(vertical; transparent; @verticalSize);
	.border(right; @color; @size);
}





/*------------------------------------*\
	# Sizing
\*------------------------------------*/

.width (@value; ...) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	width: @temp;
}
.width (@width; @maxWidth) {
	.max-width(@maxWidth);
}
.height (@value; ...) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	height: @temp;
}
.height (@height; @maxHeight) {
	.max-height(@maxHeight);
}
.size (@value) {
	.height(@value);
	.width(@value);
}
.size (@width; @height) {
	.height(@height);
	.width(@width);
}
.min-size (@value) {
	.min-height(@value);
	.min-width(@value);
}
.min-size (@width; @height) {
	.min-height(@height);
	.min-width(@width);
}
.max-size (@value) {
	.max-height(@value);
	.max-width(@value);
}
.max-size (@width; @height) {
	.max-height(@height);
	.max-width(@width);
}
.square (@size) {
	.height(@size);
	.width(@size);
}
.ratio (@ratio: (16 / 9)) when not (iskeyword(@ratio)) {
	display: block;
	height: 0;
	.padding(top; ((1 / @ratio) * 100%));
}
.ratio (embed; @ratio: (16 / 9)) {
	overflow: hidden;
	position: relative;
	&:before {
		content: ' ';
		.ratio(@ratio);
	}
}
.circle (@diameter; ...) {
	.height(@diameter);
	.rounded((@diameter / 2));
	.width(@diameter);
}
.circle (@diameter; @crop; ...) when (@crop = true) {
	overflow: hidden;
}
.circle (@diameter; @crop: val; @display: block) {
	.check () when (@display = block) {
		display: block;
	}
	.check () when (@display = inline) {
		display: inline-block;
	}
	.check();
}
.min-width (@value: @minWidth) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	min-width: @temp;
}
.max-width (@value: @maxWidth) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	max-width: @temp;
}
.min-height (@value) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	min-height: @temp;
}
.max-height (@value) when not (@value = false) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	max-height: @temp;
}





/*------------------------------------*\
	# SVG
\*------------------------------------*/

.fill (@color) when (iscolor(@color)) {
	fill: @color;
}
.fill (@color; @opacity) when (iscolor(@color)) and (isnumber(@opacity)) {
	.check () when (@opacity > 1)
			and not (ispercentage(@opacity)) {
		fill: rgba(red(@color), green(@color), blue(@color), (@opacity / 100));
	}
	.check () when (@opacity < 1) {
		fill: rgba(red(@color), green(@color), blue(@color), @opacity);
	}
	.check () when (ispercentage(@opacity)) {
		fill: rgba(red(@color), green(@color), blue(@color), unit((@opacity / 100)));
	}
	.check();
}
.fill (light; @opacity: @defaultOpacity) {
	.fill(@white; @opacity);
}
.fill (dark; @opacity: @defaultOpacity) {
	.fill(@black; @opacity);
}
.stroke (@color) {
	stroke: @color;
}
.stroke (@color; @width) {
	stroke: @color;
	.stroke-width(@width);
}
.stroke-width (@value) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	stroke-width: @temp;
}





/*------------------------------------*\
	# Tables
\*------------------------------------*/

.responsive-table () {
	overflow-x: auto;
	overflow-y: hidden;
	width: 100%;
	.spaced();
	table {
		margin-bottom: 0;
	}
}





/*------------------------------------*\
	# Text Shadows
\*------------------------------------*/

.text-shadow (@value: '1px 1px 0 rgba(0, 0, 0, @{defaultOpacity})') when (isstring(@value)), (iskeyword(@value))
		and not (@value = dark)
		and not (@value = light)
		and not (@value = inner) {
	text-shadow: ~'@{value}';
}
.text-shadow (@color; @x: 1px; @y: 1px; @blur: 0) when (iscolor(@color)) {
	.wee-text-shadow(@color; @x; @y; @blur);
}
.text-shadow (inner; @color; @x: 1px; @y: 1px; @blur: 0) when (iscolor(@color)) {
	@negX: (@x * -1);
	@negY: (@y * -1);
	.wee-text-shadow(@color; @negX; @negY; @blur);
}
.text-shadow (light; @value: @defaultOpacity; @x: 1px; @y: 1px; @blur: 0) {
	.check () when not (isnumber(@value)) {
		.text-shadow(@value);
	}
	.check () when (isnumber(@value))
			and (@value =< 0) {
		text-shadow: none;
	}
	.check () when not (ispercentage(@value))
			and (@value < 1)
			and (@value > 0) {
		.wee-text-shadow('rgba(255, 255, 255, @{value})'; @x; @y; @blur);
	}
	.check () when not (ispercentage(@value))
			and (@value >= 1), (@value >= 100) {
		.wee-text-shadow(@white; @x; @y; @blur);
	}
	.check () when (ispercentage(@value))
			and (@value > 0)
			and (@value < 100) {
		@temp: unit((@value / 100));
		.wee-text-shadow('rgba(255, 255, 255, @{temp})'; @x; @y; @blur);
	}
	.check();
}
.text-shadow (inner; light; @opacity: @defaultOpacity; @x: 1px; @y: 1px; @blur: 0) {
	@negX: (@x * -1);
	@negY: (@y * -1);
	.text-shadow(light; @opacity; @negX; @negY; @blur);
}
.text-shadow (dark; @value: @defaultOpacity; @x: 1px; @y: 1px; @blur: 0) {
	.check () when not (isnumber(@value)) {
		.text-shadow(@value);
	}
	.check () when (isnumber(@value))
			and (@value =< 0) {
		text-shadow: none;
	}
	.check () when not (ispercentage(@value))
			and (@value < 1)
			and (@value > 0) {
		.wee-text-shadow('rgba(0, 0, 0, @{value})'; @x; @y; @blur);
	}
	.check () when not (ispercentage(@value))
			and (@value >= 1), (@value >= 100) {
		.wee-text-shadow(@black; @x; @y; @blur);
	}
	.check () when (ispercentage(@value))
			and (@value > 0)
			and (@value < 100) {
		@temp: unit((@value / 100));
		.wee-text-shadow('rgba(0, 0, 0, @{temp})'; @x; @y; @blur);
	}
	.check();
}
.text-shadow (inner; @opacity: @defaultOpacity; @x: 1px; @y: 1px; @blur: 0) when (isnumber(@opacity)) {
	@negX: (@x * -1);
	@negY: (@y * -1);
	.text-shadow(dark; @opacity; @negX; @negY; @blur);
}
.text-shadow (inner; dark; @opacity: @defaultOpacity; @x: 1px; @y: 1px; @blur: 0) {
	@negX: (@x * -1);
	@negY: (@y * -1);
	.text-shadow(dark; @opacity; @negX; @negY; @blur);
}
.wee-text-shadow (@color; @x; @y; @blur) {
	.check () when (isunit(@x, '')) {
		@tempX: unit(@x, rem);
	}
	.check () when not (isunit(@x, '')) {
		@tempX: @x;
	}
	.check () when (isunit(@y, '')) {
		@tempY: unit(@y, rem);
	}
	.check () when not (isunit(@y, '')) {
		@tempY: @y;
	}
	.check () when (isunit(@blur, '')) {
		@tempBlur: unit(@blur, rem);
	}
	.check () when not (isunit(@blur, '')) {
		@tempBlur: @blur;
	}
	.check();
	text-shadow: ~'@{tempX} @{tempY} @{tempBlur} @{color}';
}





/*------------------------------------*\
	# Text Styling
\*------------------------------------*/

.bold () {
	font-weight: @boldFontWeight;
}
.italic () {
	font-style: italic;
}
.text-sharpen () {
	-moz-osx-font-smoothing: grayscale;
	-webkit-font-smoothing: antialiased;
	font-smoothing: antialiased;
}
.capitalize () {
	text-transform: capitalize;
}
.lowercase () {
	text-transform: lowercase;
}
.uppercase () {
	text-transform: uppercase;
}
.text-transform (@value: none) {
	text-transform: @value;
}
.no-wrap () {
	white-space: nowrap;
}
.wrap () {
	white-space: normal;
}
.ellipsis (@maxWidth: false) {
	overflow-x: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
	.max-width(@maxWidth);
}
.underline () {
	text-decoration: underline;
}
.underline (@style; @color: inherit) {
	.text-decoration(underline; @style; @color);
}
.line-through () {
	text-decoration: line-through;
}
.text-decoration (@value: underline) {
	text-decoration: @value;
}
.text-decoration (@line; @style; @color: inherit) {
	.text-decoration(@line);
	-moz-text-decoration-line: @line;
	-moz-text-decoration-style: @style;
	-moz-text-decoration-color: @color;
	text-decoration: @color @style @line;
}
.outline (@value: 'thin dotted') {
	outline: ~'@{value}';
}
.text-overflow (@value) {
	text-overflow: @value;
}
.white-space (@value) {
	white-space: @value;
}
.letter-spacing (@value) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	letter-spacing: @temp;
}
.word-spacing (@value) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	word-spacing: @temp;
}
.text-indent (@value) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, @defaultUnit);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	text-indent: @temp;
}
.user-select (@value: none) {
	-moz-user-select: @value;
	-ms-user-select: @value;
	-webkit-user-select: @value;
}
.tab-size (@value: @codeBlockTabSize) {
	-moz-tab-size: @codeBlockTabSize;
	tab-size: @codeBlockTabSize;
}





/*------------------------------------*\
	# Transforms
\*------------------------------------*/

.transform (...) {
	-ms-transform+_: @arguments;
	-webkit-transform+_: @arguments;
	transform+_: @arguments;
}
.transform-origin (@x; @y: 0) {
	.check () when (isunit(@x, '')) {
		@tempX: unit(@x, rem);
	}
	.check () when not (isunit(@x, '')) {
		@tempX: @x;
	}
	.check () when (isunit(@y, '')) {
		@tempY: unit(@y, rem);
	}
	.check () when not (isunit(@y, '')) {
		@tempY: @y;
	}
	.check();
	-ms-transform-origin: @tempX @tempY;
	-webkit-transform-origin: @tempX @tempY;
	transform-origin: @tempX @tempY;
}
.rotate (@angle: 45) {
	.transform(rotate(unit(@angle, deg)));
}
.scale (x; @value: 1) {
	.transform(scaleX(@value));
}
.scale (y; @value: 1) {
	.transform(scaleY(@value));
}
.scale (@value: 1) when (default()) {
	.transform(scale(@value));
}
.skew (x; @x: 45) {
	.transform(skewX(unit(@x, deg)));
}
.skew (y; @y: 45) {
	.transform(skewY(unit(@y, deg)));
}
.skew (@x: 45; @y: 0) when (default()) {
	.transform(skew(unit(@x, deg), unit(@y, deg)));
}
.translate (x; @value) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, rem);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	.transform(translateX(@temp));
}
.translate (y; @value) {
	.check () when (isunit(@value, '')) {
		@temp: unit(@value, rem);
	}
	.check () when (default()) {
		@temp: @value;
	}
	.check();
	.transform(translateY(@temp));
}
.translate (@x: 0; @y: 0) when not (@x = x)
		and not (@x = y) {
	.check () when (isunit(@x, '')) {
		@tempX: unit(@x, rem);
	}
	.check () when not (isunit(@x, '')) {
		@tempX: @x;
	}
	.check () when (isunit(@y, '')) {
		@tempY: unit(@y, rem);
	}
	.check () when not (isunit(@y, '')) {
		@tempY: @y;
	}
	.check();
	.transform(translate(@tempX, @tempY));
}
.translate (@x; @y; @z) {
	.check () when (isunit(@x, '')) {
		@tempX: unit(@x, rem);
	}
	.check () when (isunit(@x, '')) {
		@tempX: @x;
	}
	.check () when (isunit(@y, '')) {
		@tempY: unit(@y, rem);
	}
	.check () when (isunit(@y, '')) {
		@tempY: @y;
	}
	.check () when (isunit(@z, '')) {
		@tempZ: unit(@z, rem);
	}
	.check () when (isunit(@z, '')) {
		@tempZ: @z
	}
	.check();
	.transform(translate3d(@x, @y, @z));
}





/*------------------------------------*\
	# Transitions
\*------------------------------------*/

.transition (@value) when (isstring(@value)) {
	-webkit-transition+: ~'@{value}';
	transition+: ~'@{value}';
}
.transition (@property: all; @duration: @defaultDuration; @ease: @defaultTiming; @delay: 0s) {
	.check () when (@property = transform) {
		-webkit-transition+: ~'-webkit-transform @{duration} @{ease} @{delay}';
	}
	.check () when (default()) {
		-webkit-transition+: @arguments;
	}
	.check();
	transition+: @arguments;
}
.transition-delay (@delay: 1s) {
	-webkit-transition-delay: @delay;
	transition-delay: @delay;
}
.transition-duration (@duration: @defaultDuration) {
	-webkit-transition-duration: @duration;
	transition-duration: @duration;
}
.transition-property (@property: all) {
	.check () when (@property = transform) {
		-webkit-transition-property: -webkit-transform;
	}
	.check () when (default()) {
		-webkit-transition-property: @property;
	}
	.check();
	transition-property: @property;
}
.transition-timing-function (@function: @defaultTiming) {
	-webkit-transition-timing-function: @function;
	transition-timing-function: @function;
}





/*------------------------------------*\
	# Other
\*------------------------------------*/

.resize (@value) {
	resize: @value;
}
.resizable (@value: both) {
	overflow: hidden;
	resize: @value;
}
.hide-text () {
	overflow: hidden;
	text-indent: 110%;
	white-space: nowrap;
}
.selection (@color: @selectionColor; @background: @selectionBackground) {
	&::-moz-selection {
		background: @background;
		color: @color;
		text-shadow: none;
	}
	&::selection {
		background: @background;
		color: @color;
		text-shadow: none;
	}
}
.cursor (@value: pointer) {
	cursor: @value;
}
.overflow (@value) {
	overflow: @value;
}
.overflow (x; @value) {
	overflow-x: @value;
}
.overflow (y; @value) {
	overflow-y: @value;
}
.overflow (@x; @y) when (default()) {
	overflow-x: @x;
	overflow-y: @y;
}
.crop (horizontal) {
	overflow-x: hidden;
}
.crop (vertical) {
	overflow-y: hidden;
}
.crop () when (default()) {
	overflow: hidden;
}
.scroll (horizontal) {
	overflow-x: scroll;
}
.scroll (vertical) {
	overflow-y: scroll;
}
.scroll () when (default()) {
	overflow: scroll;
}
.fill (vertical) {
	height: 100%;
}
.fill (both) {
	width: 100%;
	height: 100%;
}
.fill () when (default()) {
	width: 100%;
}
.no-clear () {
	&::-ms-clear {
		display: none;
	}
	&::-webkit-search-cancel-button {
		-webkit-appearance: none;
	}
}
.appearance (@value) {
	-moz-appearance: @value;
	-webkit-appearance: @value;
	appearance: @value;
}





/*------------------------------------*\
	# Helper Classes
\*------------------------------------*/

.wee-helpers () {
	.container {
		.wee-container();
	}
	.js-hide {
		display: none !important;
	}
	.check () when not (@imageLeftClass = false) {
		.@{imageLeftClass} {
			float: left;
			.margin(.32em; @imageMarginSide; @imageMarginBottom; false);
		}
	}
	.check () when not (@imageRightClass = false) {
		.@{imageRightClass} {
			float: right;
			.margin(.32em; false; @imageMarginBottom; @imageMarginSide);
		}
	}
	.check();
}

.wee-helpers();
